---- DIPLOMARBEIT ----

{Anmerkung}
[Referenz]
{{{Code/Bild}}}

--- Einleitung/Motivation ---

Das World Wide Web ist ein integraler Bestandteil unseres Lebens geworden. Ein Großteil der Software mit der wir in Berührung kommen, benutzt Webseiten als Frontend. Desshalb muss sich jede moderne Programmiersprache daran messen lassen wie leicht es ist mit ihr Webprojekte zu erstellen. Daher bieten Java, Scala, Ruby, PHP und viele andere Programmiersprachen Frameworks an um schnell und einfach strukturierte Webprojekte zu erstellen. Ein gemeinsames Problem dieser Frameworks ist es, insbesondere mit dem aufkommen von Rich Internet Applications, das man auch clientseitig Code ausführen möchte. In diesem Bereich hat sich JavaScript zum Quasistandart entwickelt {Es gibt weitere alternativen wie Java oder Flash, die aber Browserplugins vorraussetzen}. Dadurch ist man beim schreiben von browserseitigen Funktionen auf die von den JavaScript-Entwicklern bevorzugten Programmierparadigmen wie dynamische Typisierung festgelegt.

Im Rahmen eines Projekts an der TU-Berlin wurde die Sprache Simple Language entwickelt die nach JS compiliert. Das bot die Möglichkeit mit Hilfe von Compilermakros eine typsichere funktionale Abstraktion für JS in Scala bzw. seinem Webframework Play einzubetten.

Im Rahmen eines Papers [] wurde gezeigt das es möglich ist mit Hilfe von Compilermakros statischen SL Code inline in Scala zu benutzen. Diese Einbettung sollte im Zuge dieser Diplomarbeit erweitert werden. Es ist nun möglich Scala Funktionen und Werte bis zu einem gewissen Grad automatisch zu übersetzen und typsicher im SL Code zu benutzen.

Für das Verständnis der Diplomarbeit werden Kentnisse im Berich funktionaler Programmierung sowie Grundlagen in den Sprachen Scala und JavaScript vorrausgesetzt.

-- Die Sprache SL --

- Geschichte
Mitte 2013 wurde SL als einfache funktionale Lehrsprache für den Studienbetrieb der TU-Berlin entwickelt. Im Rahmen des Compilerbauprojekts im Sommersemerster 2013 wurde SL von den Studierenden um die Möglichkeit der Modularisierung erweitert []. SL ist eine strikt getypte funktionale Sprache.

Ein SL Programm besteht aus einer Menge von Modulen. Ein Modul ist eine Textdatei mit der Endung '.sl'. In ihm können Funktionen und Typen definiert werden. Das Modul prelude.sl beschreibt alle vordefinierten Funktionen und Datentypen und wird in alle Programme eingebunden.

Der Syntax soll hier nur Beispielhaft beschrieben werden. 

Beispielmodul:
{{{
-- Kommentar

IMPORT "std/basicweb" AS Web (1)

DATA StringOrOther a = Nothing | StringVal String | OtherVal a (4)

PUBLIC FUN getOtherOrElse : StringOrOther a -> a -> a (2)
DEF getString (OtherVal x) y = x
DEF getString x y = y

PUBLIC FUN main : DOM Void (3)
DEF main = Web.alert(intToString (getOtherOrElse(exampleVar, 3)))

FUN exampleVar : StringOrOther Int
DEF exampleVar = OtherVal 5

FUN getDocumentHight : DOM Int
DEF getDocumentHight = {| window.outerHeight |} : DOM Int
}}}

1) Mit 'IMPORT "<Pfad>" AS <Bezeichner>' können Module nachgeladen werden. Typen und Funktionen die aus Fremdmodulen benutzt werden müssen mit dem <Bezeichner> qualifiziert werden. Ein Beispiel dafür ist 'Web.alert(...)'.

2) Die optionale Typdefinition einer Funktion kann mit 'FUN <Funktionsname> : <Typ>' angegeben werden. Wenn ein PUBLIC vorgestellt wird, ist die Funktion auch außerhalb des Modules sichtbar. Darauf folgen eine oder mehrer pattern basierte [siehe Opal] Funktionsdefinition der Form 'DEF <Funktionsname> = <Funktionsrumpf>'. 

3) Ein Spezialfall bildet die Funktion 'main'. Sie bildet den Einstiegspunkt in ein SL Programm. Sie hat den festen Typ 'DOM Void'. 'DOM a' und 'Void' sind einige der Vordefinierten Typen. 'Void' bezeichnet den leeren Typen, also keinen Rückgabewert. 'DOM a' ist der Typ der JS-quoating Monade. Mit ihr können JS Snippets in SL eingebunden werden (Beispiel: '{| window.outerHeight |} : DOM Int'). Weiter vordefinierte Typen sind 'Char' und 'String' um Zeichen(ketten) darzustellen, sowie 'Int' für ganzezahlige Werte und 'Real' für Gleitkommazahlen. Der letzte vordefinierte Typ ist 'Bool' für boolsche Werte.

4) Mit 'DATA <Typname> [<Typprameter> ...] = <Konstruktor> [<Typparameter> ...] | ...' können eigene Typen definiert werden. Wie wir die so möglichen SL Typen und Werte nach Scala und zurück übersetzen wird Stoff des nächsten Kapitels sein.

SL bietet noch weitere Features wie Lambdafunktionen, benutzerdefinierte Operatoren und 'LET IN'-Ausdrücke, diese sind aber nicht für das Verständnis der Diplomarbeit relevant. Bei interesse kann die aktuelle Grammatik und lexikalische Struktur im Report des Compilerbauprojekts [] nachgelesen werden.


- Nur die relvanten Teile erleutern

- Eigenschaften
 - Polymorphe Datentypen
 - lambda Funktionen
 - patternbased Funktionsdefinitionen
 - Benutzerdefinierte Operatoren
 - interfered Funktionstypes
 - JS Quots
 - Module


--- Automatische Werttransformation ---

(muss überarbeitet werden)



Wenn man Scala Werte in SL Code benutzen möchte müssen diese übersetzt werden. Sowohl der Typ als auch die interne Darstellung. Möchten man zum Beispiel den Scala Wert '1.0' in SL übersetzen, so weist der Scala Compiler diesen mit dem Typ 'Float' aus. Die naheliegenste Entsprechnung in SL wäre dazu 'Real'. Die Übersetzung der Darstellung wäre in diesem Fall ähnlich naheliegend. Da SL nach JS compiliert würde der Wert im JS Compilat durch '1.0' representiert werden. Die Gegenrichtung, also wenn wir SL Werte in Scala benutzen wollen, funktioniert analog. 

Im Zuge der Diplomarbeit reichte es immer anhand des Scala Typs alle benötigten Teile der Übersetzung zu bestimmen:
 - passender SL Typ
 - Funktion zum Übersetzen eines Scala Wertes in einen SL Wert
 - Funktion zum Übersetzen eines SL Wertes in einen Scala Wert

(Schematische Beschreibung der übersetzung von eines wertes und einer Funktion <- erklärt warum wir immer von dem scala typ ausgehen)

Zunächst betrachten wir die Typübersetzung, darauf folgt die Darstellungsübersetzung und schließlich eine Beschreibung der Implementation.

 -- Typübersetzung --

Das Typsystem von SL ist (entsprechend seines Anspruches als Lehrsprache) sehr einfach. Es gibt eine Reihe von vordefinierten Typen 'Int', 'Real', 'Char', 'String', 'Bool' und 'Void' sowie den Typ der JS-Quoting Monade 'DOM a'{Typen werden groß geschrieben, Typvariablen klein. 'DOM a' steht als zum Beispiel für 'DOM Void', 'DOM Int' usw.}. Mit dem Stichwort DATA können eigene Konstruktor-/Summentypen definiert werden [siehe Funktionale Programmierung].

{{{
Bild: Beispiele für selbstdefinierte Datentypen in SL

-- Summentyp
DATA Fruits = Apple | Orange | Plum

-- Konstruktortyp
DATA CycleKonst = Cycle Int Int

-- Mischung aus Konstruktor- und Summentyp mit Typvariablen
DATA Either a b = Left a | Right b
}}}

Im Gegensatz dazu ist das Typsystem von Scala wesentlich komplexer. Scala ist strikt Objektorientiert. Es kennt keine Vordefinierten Typen. Alle Typen sind Objekte, aber es gibt vordefinierte Objekttypen die den primitiven Datentypen von Java zugeordnet werden können [vgl.: http://www.scalatutorial.de/topic161.html#basistypen]. 

{{{
Bild: Objekttypen von Scala in ihrer Klassenhierachie [vgl.: http://www.scalatutorial.de/topic161.html#basistypen]

                     scala.Any

scala.AnyVal                       scala.AnyRef

scala.Byte                         java.lang.String
scala.Short                        ...
scala.Int
scala.Long
scala.Float
scala.Double
scala.Char
scala.Boolean
scala.Unit
...
}}}

Eigene Typen können in Scala mit Vererbung und den Schlüsselworten 'object' und 'class' definiert werden. Für die Methoden der Klassen gibt es in SL kein Äquivalent.

Für die Übersetzung der Typen definieren wir eine Funktion 'translate_type(scala_type) = sl_type'. In Abbildung [] sehen man diese für die primitiven Datentypen von SL. Diese Zuordnung wurde gewählt, da sie semantisch am Sinnvollsten ist. Die Typen 'Float' und 'Double' wurden mit 'Real' assoziert um die Bedienung zu erleichtern. Analog gilt dies für den SL Typ 'Int' {Man hätte auch keine Übersetzung für 'Byte', 'Short', 'Int' bzw 'Float' anbieten können. Der Benutzer müsste dann solche Werte zu 'Long' bzw. 'Double' casten. Weil dies wenig Intuitiv ist wurde von dieser Lösung abstand genommen.}. Wir kommen aber im Rahmen der Darstellungsübersetzung noch einmal darauf zurück. Für 'DOM a' existiert kein sinnvolles Pandant in Scala.

{{{
Bild: translate für primitiven SL Typen:

SL             Scala
           --> Float
Real   <--|
           --> Double

           --> Byte
          |
          |--> Short
Int    <--|
          |--> Int
          |
           --> Long


Char   <-----> Char

Bool   <-----> Boolean

Void   <-----> Unit

String <-----> String

DOM a
}}}

Bei selbstdefinierten Typen muss die Übersetzung händisch passieren. Der SL Typ 'Option a' soll dafür als Beispiel dienen. Neben syntaktischen Anforderungen wie:
 - gleiche Anzahl von Typparametern
 - alle Werte des Typs x in Scala müssen sich in Werte des Typs translate_type(x) in SL darstellen lassen und umgekehrt [siehe nächstes Kapitel]
 - ähnliche Unterstruktur [siehe Abblildung Übersetzung von Option]
Ist vor allem die semantische Gleichheit wichtig. Man könnte den SL Typ 'String' in Scala durch 'Seq[Char]' darstellen und diese Konstruktion würde die syntaktischen Anforderungen erfüllen, wäre aber wenig sinnvoll da unintuitiv. Vor allem würden in Scala die passenden Funktionen fehlen um mit den übersetzten Werten umzugehen.
Für diese Arbeit wurde Beispielhaft 'Option a' wie in der Abbildung [] beschrieben übersetzt. 

{{{
Bild: Option in SL und Scala

Option in SL:
PUBLIC DATA Option a =
	  Some a
	| None

Option in Scala:
sealed abstract class Option[+A] ... {
  self =>

  def isEmpty: Boolean
  
  ...
}

final case class Some[+A](x: A) extends Option[A] {
  ...
}

case object None extends Option[Nothing] {
  ...
}
}}}

{{{
Bild: Übersetzung von 'Option a'

SL                              Scala

Option translate_type(a)  <---> Option[a]
Some(x:translate_type(a)) <---> Some(x:a)
None                      <---> None
}}}

Fehlt noch in diesem Kapitel:
 - zu einem Scala Typ wird genau ein SL Typ gewählt
 - Behandlungen von spezialisierungen -> Wir können nicht List[Int] mit dem SeqTranslator übersetzen


 -- Darstellungs Übersetzung --

Wie bereits in der Einführung dieses Kapitels erwähnt, wählen wir die Wertübersetzungsfunktionen anhand des Scala Typs. Da SL nach JS kompliliert muss ein Scala Wert entsprechend seines Typs in eine passende JS Darstellung übersetzt werden. Für die Gegenrichtung, also SL nach Scala gilt dies analog. Bei allen Übersetzungen haben wir das Problem der unterschiedlichen Grenzen. Man kann zwar jeden Wert des Scala Types 'Byte' in einen Wert des SL Typs 'Int' übersetzen, aber nicht umgekehrt. In der Abbildung [] werden die Grenzen für primitive Typen aufgelistet. Die Übersetzung übernimmt bei den primitiven Datentypen die JSON Bibliothek json4s [https://github.com/json4s/json4s].

{{{
Bild: Umfang der primitven Datentypen in Scala und SL (JS)
{Alle Zahlendatentypen werden in JS durch den primitiven Number Datentyp dargestellt. Dies ist eine Gleitkommazahldarstellung nach dem IEEE 754 Standart mit einer Breite von 64 Bit. In dieser Darstellung können Ganzzahlwerte von -2^53 + 1 bis 2^53 -1 korrekt dargestellt werde.}
{Die maximale Länge von Strings in JS und Scala ist Implementationsabhängig.}

SL     JS Darstellung                  Scala

Int    Number [-2^53 + 1, 2^53 -1]     Byte  [-128, 127]
Int    Number [-2^53 + 1, 2^53 -1]     Short [-2^15, 2^15-1]
Int    Number [-2^53 + 1, 2^53 -1]     Int   [-2^31, 2^31-1]
Int    Number [-2^53 + 1, 2^53 -1]     Long  [-2^63, 2^63-1]

Real   Number (IEEE 754 64-Bit)        Float  (IEEE 754 32-Bit)
Real   Number (IEEE 754 64-Bit)        Double (IEEE 754 64-Bit)

Bool   Boolean {true, false}           Boolean {true, false}

Char   String (Länge 1) (16-Bit)       Char (16-Bit)

String String (maximale Länge: ?)      String (maximale Länge: ?)

[http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf]
[http://754r.ucbtest.org/]
[http://docs.oracle.com/javase/specs/jls/se7/html/jls-4.html#jls-4.2.1]
[http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html]
}}}

Bei nicht primitiven Werten ist mehr Aufwand nötig. Dazu muss man zuerst verstehen wie die Darstellung von SL Werte für selbstdefinierte Type JS aussieht. 

(Beschreibung der übersetzung fehlt)

{{{
Bild: JS Darstellung von nichtprimitiven SL Typen

DATA People a b c = Alice | Bob a | Cesar b c | Dieter

SL                JS Darstellung
Alice             0
Bob 42            { "_cid" => 1, "_var0" => 42 }
Cesar "a" true    { "_cid" => 2, "_var0" => "a", "_var1" => true }
Dieter            3
}}}

(Zwischensatz)
- Hier können vielfältige Probleme bei den Übersetzungen auftreten zb.: Können Seq[Double] beliebiger Länge in List[Real] übersetzt werden

{{{
Bild: Übersetzung von Option Werten

SL           JS Darstellung       Scala

Option a                          Option[a]

Some(val)    { "_cid" => 0        Some(sl_to_scala(val))
             , "_var0" => val
             }

None         1                    None
}}}

 -- Erleuterung der Implementation --


Die Übersetzung ist in Klassen organisiert. Eine Klasse erbt von 'AbstractTranslator' und bildet dabei die Verbindung von einem Scala Typen mit einem SL Typen ab. Da sie wir immer vom Scala Typen ausgehen sind sie nach diesen benannt. Die Hauptfunktion ist 'translate'. Ihr wird ein Scala Typ übergeben. Wenn der übergebene Scala Typ der Klasse entspricht erhält man als Rückgabewert den entsprechenden SL Typen, die Import Statements um die entsprechenden SL Module zu laden {Bei primitven SL Typen sind diese leer. Für den SL Typ List.List Opt.Option Int würde {'IMPORT std/option AS Opt', 'IMPORT std/list AS List'} zurück gegeben werde} sowie die AST-Representation der Wertübersetzungsfunktionen von Scala nach SL und umgekehrt.

{{{
Code: translate

def translate( context: MacroCtxt )( input: context.universe.Type, translators: Seq[AbstractTranslator] ): Option[( String, Set[String], context.Expr[Any => JValue], context.Expr[JValue => Any] )]
}}}

Weiter Parameter sind 'context' und 'translators'. 'context' ist der Compiler Macro Kontext. Mit 'translators' werden alle Translatorklassen übergeben mit denen Spezialisierungen übersetzt werden können.

Möchte man einen Scala Typ nicht nur gegen eine Klasse prüfen kann man die Hilfsfunktionen 'useTranslators', 'useTranslatorSLToScala' oder 'useTranslatorScalaToSL' aus dem companion object von 'AbstractTranslator' nutzen.

{{{
Code: Hilfsfunktionen

def useTranslators( c: MacroCtxt )( input: c.universe.Type, translators: Seq[AbstractTranslator] ): Option[( String, Set[String], c.Expr[Any => JValue], c.Expr[JValue => Any] )]

def useTranslatorSLToScala( c: MacroCtxt )( input: c.universe.Type, translators: Seq[AbstractTranslator] ): Option[( String, Set[String], c.Expr[JValue => Any] )]

def useTranslatorScalaToSL( c: MacroCtxt )( input: c.universe.Type, translators: Seq[AbstractTranslator] ): Option[( String, Set[String], c.Expr[Any => JValue] )]
}}}

'translators' gibt hier an welchen Teil der Funktion 'translate_type' man nutzen möchte.

   - OptionTranslator Klasse als Beispiel -

Exemplarisch für die Implementation werden wir im Folgenden den OptionTranslator betrachten.

{{{
object OptionTranslator {
  def scalaToJsOption( input: Any, f: Any => JValue ): JValue =
    {
      import org.json4s._

      input match {
        case Some( x ) => {
          val tmp: List[( String, JValue )] = List( "_cid" -> JInt( 0 ), "_var0" -> f( x ) )
          JObject( tmp )
        }
        case None => JInt( 1 )
        case _ =>
          // this should never happen. This can only occur if there is a bug in handleParameter
          throw new IllegalArgumentException
      }
    }

  def jsToScalaOption[T]( input: JValue, f: JValue => T ): Option[T] =
    {
      input match {
        case JInt( _ ) => None: Option[T]
        case JObject( x ) => {
          val tmp = x.find( j => ( j._1 == "_var0" ) )
          if ( tmp.isDefined )
            Some( f( tmp.get._2 ) )
          else
            throw new IllegalArgumentException
        }
        case _ => throw new IllegalArgumentException
      }
    }
} 

case class OptionTranslator( override val module_alias: String = "Opt") extends AbstractModulTranslator( module_alias ) {
  val import_path = "std/option"

  override def translate( context: Context )( input: context.universe.Type, translators: Seq[AbstractTranslator] ): Option[( String, Set[String], context.Expr[Any => JValue], context.Expr[JValue => Any] )] =
    {
      import context.universe._

      val option_class_symbol: ClassSymbol = typeOf[Option[_]].typeSymbol.asClass
      val first_type_parameter: Type = option_class_symbol.typeParams( 0 ).asType.toType
      val option_any_type: Type = typeOf[Option[Any]]

      if ( input.<:<( option_any_type ) ) {
        val actual_type = first_type_parameter.asSeenFrom( input, option_class_symbol )
        
        

        println( actual_type )

        AbstractTranslator.useTranslators( context )( actual_type, translators ) match {
          case Some( ( sl_type, imports, expr_s2j, expr_j2s ) ) =>
            {
              //TODO find something more performant then reify(foo.splice). this eats up the heap very very fast
              // q"foo" is not possible because you can not use functions (Expr[Any => String]) in parameter lists
              val scala2js = reify( { import de.tuberlin.uebb.sl2.slmacro.variabletranslation.std; ( i: Any ) => OptionTranslator.scalaToJsOption( i, expr_s2j.splice ) } )
              val js2scala = reify( { import de.tuberlin.uebb.sl2.slmacro.variabletranslation.std; ( i: JValue ) => OptionTranslator.jsToScalaOption( i, expr_j2s.splice ) } )
              Some( ( module_alias + ".Option ( " + sl_type + " )", imports + module_import, scala2js, js2scala ) )
            }
          case None =>
            None
        }
      }
      else
        None
    }
  
  override def rename(module_alias:String) = copy(module_alias);

}
}}}

--- Scala Compiler Macros ---

 -- inline Macro --

 -- annotation Macro --

 -- Aufrufe von SL Funktionen ---

--- Erweiterungen an der DOM Monade ---

--- Related Work --- (5 - 10 Seiten)

--- Zusammenfassung ---

-- Future Works --

- Security Aspekte beim Aufrufen von Scala Funktionen
- Play PlugIn bauen
- Translators/Runtime checker für weiter SL Datentypen
- AJAX nicht SJAX (ist es möglich das Compilat so umzubauen das das möglich ist?)
- Belegen von JS events mit SL Code
- Erzeugen eines JAR's
- generierung von Scala Klassen und der dazugehörigen Translatorklassen aus SL Modulen

Anhand dieses Beispiels können wir nun für einen beliebig komplexen Typ aus SL sein Pendant in Scala konstruieren. Dazu sei {f^-1 = f U {(Float,Real), (Int,Int)}} (TODO bessere Beschreibung von f | rekursion einbauen):

TODO was bedeutet +A was bedeutet sealed was bedeutet final

{{{
Bild(inline):

PUBLIC DATA Test a b =      | sealed abstract class Test[+A,+B] {}
                            |
    Test a b                | final case class TestImpl[+A,+B](p1:A,p2:B) extends Test[A,B] {}
                            |
  | Test2 a Real            | final case class Test2[+A](p1:A,p2:Double) extends Test[A,Nothing] {}
                            |
  | Test3 b ( Test a Real ) | final case class Test3[+A,+B](p1:B,p2:Test[A,f^-1(Real)]) extends Test[A,B] {}
                            |
  | Test4 ( List a )        | final case class Test4[+f^-1(List a)](p1:f^-1(List a)) extends Test[A, Nothing] {}  // bis jetzt kennt f bzw. f^-1 List a noch nicht, also würde die Übersetzung fehlschlagen
                            |
  | Test5                   | case object Test5 extends Test[Nothing, Nothing] {}


 
}}}

- Erweiterung von Tests (Test, das Compilat von Some(1) == Trans(Some(1)) ist)
- alle JS Hilfsfunktionen von SL in einem Objekt sammeln (weniger müll im Globalen Variablenraum)
- Die Enbettung Configurierbarer machen

--- Anhänge ---

-- Quellenverzeichniss --

-- Benutzte Techniken/Bibliotheken --

- jQuery
- require.js
- json.js
- scala json bibleothek
- Scala
- Play
- Macroparadise
- SL

-- Aufsetzen eines Play Projekts mit SL Compiler Macros --

-- Abkürzungsverzeichniss --
SL = Simple Language
JS = Java Script
TU-Berlin = Technische Universität Berlin
AST = Abstract Syntax Tree | Abstrakter Syntaxbaum

-- Beschreibung der [Unit]Tests --


